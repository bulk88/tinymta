<html manifest="stop.appcache">
<head>
<link href="//tiles1.tinymta.us.to" rel="dns-prefetch">
<link href="//tiles1.tinymta.us.to" rel="preconnect">
<link href="//tiles2.tinymta.us.to" rel="dns-prefetch">
<link href="//tiles2.tinymta.us.to" rel="preconnect">
<script async src=fav.js></script>
<link href=tileMap.htm rel=prefetch>
<meta name="mobileoptimized" content="0">
<meta name="referrer" content="no-referrer">
<style>:root{color-scheme:light dark}</style>
</head>
<body>No javascript</body>
<script>
mangleIndex={name:"mangleIndex"};

/*STARTSUBCOLOR*/
var colorStrsSUB = ["ff6319","00933c","6d6e71","fccc0a","286ded","ee352e","0078c6","996633","b933ad"];
var colorRoutesSUB = {/*"F":0,*//*"D":0,*//*"B":0,*//*"M":0,*//*"FX":0,*/"6X":1,"4":1,"5":1,"5X":1,"6":1,"FS":2,"S":2,"GS":2,"H":2,"R":3,"Q":3,"N":3,"W":3,"A":4,"C":4,"E":4,"2":5,"3":5,"1":5,"SI":6,"SIR":6,"Z":7,"J":7,"7":8,"7X":8,"G":"6cbe45","L":"a7a9ac"};
/*ENDSUBCOLOR*/

var url;
/* var t is "top" as in top of body (header) */
var t;
var curTime;

if(!this.onpopstate) {
  this.onpopstate = function (evt) {evt.state !== null && location.reload()};
}

function onNewURL(){

t = location.hash;
/* on Chrome, refresh does a 200 or 304 on stop.htm on GH Pages plus MTA call
   even though if I do a "back" then navigate back to stop.htm, no TCPIP traffic
   related to stop.htm because stop.htm is fetched from browser cache, sadly there
   seems to be no way to do a refresh or a replace without triggering network traffic
   so just implement a "Fast" path that does the AJAX call alone, kindda important
   for latency reasons on 2G networks, 200 always if .reload(1),
   304 typ if .reload(0)
*/
if(t != '' && t != '#') {
/*
unusable long IMO and doesn't have N/S combo, I didnt research if parent
station searchable (N/S combo)

http://otp-mta-prod.camsys-apps.com/otp/routers/default/index/stops/MTASBWY:621N/stoptimes?timeRange=600&apikey=Z276E3rCeTzOQEoBPPN4JCEc6GfvdnYE 

not enough info, no dest info
https://api.wheresthefuckingtrain.com/by-id/82bd

fails, unknown why
http://collector-otp-prod.camsys-apps.com/realtime/MTASBWY/stopTimes?apikey=qeqy84JE7hUKfaI0Lxm2Ttcm6ZA0bYrP

use MTA UI official backend
http://otp-mta-prod.camsys-apps.com/otp/routers/default/nearby?stops=MTASBWY%3AF01&timeRange=1800&apikey=Z276E3rCeTzOQEoBPPN4JCEc6GfvdnYE
*/
    url = '//otp-mta-prod.camsys-apps.com/otp/routers/default/nearby?timerange=1800&apikey=Z276E3rCeTzOQEoBPPN4JCEc6GfvdnYE&stops=MTASBWY:'
    +t.slice(1, 4);
    /* generate body top string once, its later used for fast refresh */
    t = '<a href=javascript:history.back()>Back</a> Refresh[<a href=javascript:y()>Fast</a> <a href=\"javascript:location.replace(\''
          +
/*STARTINSERTPATH*/
          (/stop\.htm$/.test(location.pathname) ? "stop_.htm" : "stop.htm")
/*ENDINSERTPATH*/
          +t+'\')">Slow</a>] <a href='+url+'>Raw</a> <a href=tileMap.htm#'+t.slice(4)+'>Map</a><br>';
}

if (url) {
  if (this.fetch) {
    y/*getStop*/();
  } else {
    //IE 5.5 and 6.0 don't have document.head
    document.documentElement.firstChild.appendChild(document.createElement("script")).src = 'f.js';
  }
}
else
    document.body.innerHTML = 'No station specified in url anchor.';
}//end onNewURL

this.y = y;
onhashchange = onNewURL;
location.pathname == '/stop.htm' && onNewURL();

//text includes [] chars usually, if route blank, text is route
function mkSubFontTag(text, route) {
  var tag;
  tag = colorRoutesSUB[route = route || text];
  if(typeof tag !== 'string') {
    tag = colorRoutesSUB[route] = colorStrsSUB[tag|0]; //undef to 0
  }
  return '<font color='+tag+'>'+text+'</font>';
}

//t = "2021-05-11T18:58:08-04:00" getFormattedTime
/* unused since switch from abs time to Mins
function getFormattedTime(t) {
    var e = parseIsoDatetime(t),
        h = e.getHours(),
        m = e.getMinutes(),
        a = h > 12 ? h - 12 : h;
    return (0 === a ? "12" : a)+ ":"+(m < 10 ? "0" + m : m)+" "+(h > 11 ? "PM" : "AM");
}
*/

/* mislabeled now */
function parseIsoDatetime(dt,i) {
    dt = dt.split(/[: T-]/);
    for (i=0; i < dt.length; i++)
        //cast string to num
        dt[i] = +dt[i];
    //return //modified by bulk88 to be mins away instead of parse, Math.floor->0|
    //factoring out Math.abs to x < 0 ? -x : x primative increased gz 4 bytes
    return 'Min '+(0|(Math.abs((
        new Date(dt[0], dt[1] - 1, dt[2], dt[3] || 0, dt[4] || 0, dt[5] || 0, 0)
        - curTime) / 1e3) / 60));
}

/* MTA orig algo
function minsAway(t) {
    var e = Number((new Date).getTime());
    t = Number(t.getTime());
    var n = Math.floor(Math.abs((t - e) / 1e3) / 60);
    if (0 === n) return "Arriving";
    if (n < 60) return " ".concat(n < 10 ? 0 : "").concat(n, " mins away ");
    var a = null,
      s = null;
    return a = Math.trunc(n / 60), s = n % 60, " ".concat(a < 10 ? 0 : "").concat(a, ":").concat(s < 10 ? 0 : "").concat(Math.floor(s), " mins away")
}*/

/*y=getStop, must be var "y" for f.js polyfill to find and call on f.js load/exec */
function y(ls) {
  document.body.innerHTML = t; /*t=top*/

    function fCB (r) {
    r.status != 200 ? //put != first for r.status gzip reasons
    alert("error http status " + r.status)
     :
    r.json().then(function (r, /*r=resp*/ jsonp) {
    /*h=html and timestamp*/
    var h = 0,i,n,route,trip,alerts_headsign,o = {}, sta_name /*,hotkey, hotkeys = [2,3,4,5,6,7,8,9,0] */;
if (r = r[0]) {//if(r.length) { shorter alternative
    //initial array is for a geosearch with multiple stations, not exact sta, so go 1 level deep
    //server returns sorted by route, we want sort by dir
    i=0;
    while(route = r.groups[i++]) {
        alerts_headsign = route.headsign;
        n=0;
        while(trip = route.times[n++]){
            trip.shortRouteName = route.route.shortName;
            trip.timestamp > h && (h = trip.timestamp);
            (o[alerts_headsign] = o[alerts_headsign] || []).push(trip);
        }
    }

    for (i in o) //object keys
        //alpha sort ISO 8601 timestamps
        o[i].sort(function(a, b) {
            return a.departureFmt < b.departureFmt ? -1 :
                a.departureFmt > b.departureFmt ? 1 :
                0;
        });
    /* departureFmt becomes UI time eventually
            return _.each(t.times, function(t) {
              e.times.push({
                stopId: t.stopId,
                realtime: t.realtime,
                status: t.realtimeState,
                departure: t.departureFmt,
                pattern: t.pattern ? t.pattern.id : null,
                tripHeadsign: t.tripHeadsign ? t.tripHeadsign.toLowerCase() : "",
                tripId: t.tripId,
                serviceDay: t.serviceDay,
                directionId: t.directionId
              })
            }), e
    */

    h = (new Date(h*1000)).toLocaleTimeString('en-US')+(jsonp ? ' via JSONP' : ' via CORS') + "<br>" +
        'Cur Sta: ' + (sta_name = r.stop.name) + "<br>";
    curTime = Date.now();
    for (i in o) { //object keys
        h += i + "<br>";
        //route is dir really
        route = o[i];
        i=0;
        while(trip = route[i++]){
            //if departureDelay > 0 
            //todo (49620-49080)/60 = 9 mins late
            //MN/LIR algo, NYCT reports also
            //realtimeDeparture: 49620
            //scheduledDeparture: 49080
            h += parseIsoDatetime(trip.departureFmt) +
                '-' + mkSubFontTag(trip.shortRouteName) +
                '-' + trip.tripHeadsign +
                //disable track numbers, nobody cares, this isn't Commuter rail
                //'-Tk' + (trip.track === void 0 ? '?' : ' ' + trip.track ) +
                (trip.track === void 0 ? '-Tk?' : '') +
                (trip.realtime ? '-' : '-NRT-') +
                (function(rts) {
                  rts = {
                        "SCHEDULED": "SCH",
                        "UPDATED": "UPD",
                        "CANCELED": "CNX",
                        "ADDED": "ADD",
                        "MODIFIED": "MOD"
                        }[rts];
                  return rts ? rts : "UNK";
                })(trip.realtimeState)
/* delay can be neg, chop off fractional,
OTP overflow bug on "service day", scheduledDeparture is seconds
since midnight of yesterday, realtimeDeparture is seconds since
midnight of today, happens right after 1200AM */
                + ((trip=((((trip = trip.departureDelay) < -43200
 ? trip +86400 : trip )/60)|0)) ? (trip > 0 ? '-L' : '-E')+Math.abs(trip): '') +"<br>";
        }
    }
    h += '<br>Key: E2 (early 2 min) L3 (late 3 min)<br>NRT (not realtime)<br><br>';
    o = ''; // deferred UI alerts (ongoing (unsched) vs planned)
    //alerts array sometimes missing
    r = r.alerts || [];
    //time sort alerts in the array
    r.sort(function(a, b) {
        return a.effectiveStartDate < b.effectiveStartDate ? -1 :
            a.effectiveStartDate > b.effectiveStartDate ? 1 :
            0;
    });
    i=0;
    while(trip = r[i++]) {
    if(trip.alertType) { //skip elevators, elevators are missing alertType field
      route = trip.alertType+"<br>"+(trip.humanReadableActivePeriod || 'Ongoing')+"<br>"+trip.alertHeaderText.replace(/\[(\w+)\]/g, mkSubFontTag)+(trip.alertDescriptionText?"<br>"+trip.alertDescriptionText.replace(/\[(\w+)\]/g, mkSubFontTag):'')+"<br><br>";
      //delays dont have a time period, put them first in UI
      trip.humanReadableActivePeriod ? o += route : h += route;
    }
    }
    h += o;
} else
    h = "station not found";

    document.body.innerHTML += h;

    (window.rF = window.rF || []).push(sta_name, "s"+location.hash.slice(1));

})} //end fCB

  if ((ls = window.S) && ((window.S = 0),ls.s === location.hash.slice(1))
      && (Date.now()-ls.t < 3000)
  ) {
    ls.f(fCB);
  } else {
    fetch(url).then(fCB);
  }

}

</script>
</html>

