<body>
<script>
/* git auth token extracted like this from windows box

sh-4.4$  GIT_TRACE=1 GIT_TRACE_PACK_ACCESS=1 GIT_TRACE_PACKET=1 GIT_TRACE_PERFORMANCE=1 GIT_TRACE_SETUP=1 GIT_MERGE_VERBOSITY=1 GIT_CURL_VERBOSE=1 GIT_TRACE_SHALLOW=1 GCM_TRACE=1 GIT_TRACE_REDACT=0 git push

code taken from
https://github.com/renovatebot/renovate/blob/5f213255d088054500cdd980b62092f4d22f5f4c/lib/platform/github/storage.js

 */


var SECERT = undefined;

var get = {};

async function got (url, options) {return ajaxRun("GET", url, options)}
async function post (url, options) {return ajaxRun("POST", url, options)}
async function patch (url, options) {return ajaxRun("PATCH", url, options)}
async function ajaxRun (method, url, options) {
  url = await fetch('https://api.github.com/' + url, {
    method: method,
    headers: {
      authorization: SECERT
    }
    ,  ...(options && {body: JSON.stringify(options)})
  });
  return await url.json();
};

var config = {
  repository: 'bulk88/tinymta',
};

let branchFiles = {};

var global = {
  gitAuthor: {
    name: "RoutesBot",
    email: "bulk88@hotmail.com",
  }
};

//need time zone like moment.js does
function toIsoString(date) {
  var tzo = -date.getTimezoneOffset(),
  dif = tzo >= 0 ? '+' : '-',
  pad = function (num) {
    return (num < 10 ? '0' : '') + num;
  };

  return date.getFullYear() +
  '-' + pad(date.getMonth() + 1) +
  '-' + pad(date.getDate()) +
  'T' + pad(date.getHours()) +
  ':' + pad(date.getMinutes()) +
  ':' + pad(date.getSeconds()) +
  dif + pad(Math.floor(Math.abs(tzo) / 60)) +
  ':' + pad(Math.abs(tzo) % 60);
}

// Create a commit and return commit SHA
async function createCommit(parent, tree, message) {
/* unused
  const {
    gitPrivateKey
  } = config;
*/
  /* const now = moment(); */
  let author;
  if (global.gitAuthor) {
    author = {
      name: global.gitAuthor.name,
      email: global.gitAuthor.email,
      date: toIsoString(new Date()) /* now.format() */,
    };
  }
  const body = {
    message,
    parents: [parent],
    tree,
  };
  if (author) {
    body.author = author;
/* unused
    if (gitPrivateKey) {
      const privKeyObj = openpgp.key.readArmored(gitPrivateKey).keys[0];
      const commit = `tree ${tree}\nparent ${parent}\nauthor ${
            author.name
          } <${author.email}> ${now.format('X ZZ')}\ncommitter ${
            author.name
          } <${author.email}> ${now.format('X ZZ')}\n\n${message}`;
      const {
        signature
      } = await openpgp.sign({
        data: openpgp.util.str2Uint8Array(commit),
        privateKeys: privKeyObj,
        detached: true,
        armor: true,
      });
      body.signature = signature;
    }
*/
  }
  return (await post(`repos/${config.repository}/git/commits`, body))
  .sha;
}

// Internal: Updates an existing branch to new commit sha
async function updateBranch(branchName, commit) {
  const options = {
    sha: commit,
    force: true,
  };
  try {
    await patch(
`repos/${config.repository}/git/refs/heads/${branchName}`,
      options);
  } catch (err) {
    if (err.statusCode === 422) {
      console.log(err + ' Branch no longer exists - exiting');
      throw new Error('repository-changed');
    }
    throw err;
  }
}
// Low-level commit operations

// Return the commit SHA for a branch
async function getBranchCommit(branchName) {
  try {
    const res = await got(
`repos/${config.repository}/git/refs/heads/${branchName}`);
    return res.object.sha;
  } catch (err) {
    if (err.statusCode === 404) {
      throw new Error('repository-changed');
    }
    if (err.statusCode === 409) {
      throw new Error('empty');
    }
    throw err;
  }
}
// Return the tree SHA for a commit
async function getCommitTree(commit) {
  return (await got(`repos/${config.repository}/git/commits/${commit}`))
  .tree.sha;
}
async function createBlob(fileContents) {
  const options = {
    encoding: 'base64',
    content: btoa(fileContents)
  };
  return (await post(`repos/${config.repository}/git/blobs`, options))
  .sha;
}

// Create a tree and return SHA
async function createTree(baseTree, files) {
  const body = {
    base_tree: baseTree,
    tree: [],
  };
  files.forEach(file => {
    body.tree.push({
      path: file.name,
      mode: '100644',
      type: 'blob',
      sha: file.blob,
    });
  });
  return (await post(`repos/${config.repository}/git/trees`, body))
  .sha;
}
// Add a new commit, create branch if not existing
async function commitFilesToBranch(
  branchName,
  files,
  message,
  parentBranch = config.baseBranch) {
  try {
    delete branchFiles[branchName];
    const fileBlobs = [];
    // Create blobs
    for (const file of files) {
      const blob = createBlob(file.contents);
      fileBlobs.push({
        name: file.name,
        blob,
      });
    }
    const parentCommit = await getBranchCommit(parentBranch);
    const parentTree = await getCommitTree(parentCommit);
    // Create tree
    for(var i=0;i<fileBlobs.length; i++) {
      fileBlobs[i].blob = await fileBlobs[i].blob;
    }
    const tree = await createTree(parentTree, fileBlobs);
    const commit = await createCommit(parentCommit, tree, message);
    /*
    const isBranchExisting = await branchExists(branchName);
    if (isBranchExisting) { */
      await updateBranch(branchName, commit);
      return 'updated';
/*
    }
    await createBranch(branchName, commit);
    if (branchList) {
      branchList.push(branchName);
    }
    return 'created';
*/
  } catch (err) {
    if (err.statusCode === 404) {
      throw new Error('repository-changed');
    }
    throw err;
  }
}
commitFilesToBranch("master", [{
      name: "t.txt",
      contents: ""+new Date().toLocaleString("en-US", {timeZone: "America/New_York"})
    }
  ], "Routes "+new Date().toLocaleString("en-US", {timeZone: "America/New_York"}), "master");
  </script></body>
