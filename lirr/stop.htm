<html>
<head><meta name="mobileoptimized" content="0"></head>
<body>No Javascript.</body>
<script type="text/javascript">
/*Firefox, Opera, IE7, and other browsers will use the native object*/
/*IE 5 and 6 will use the ActiveX control*/
var x = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
var jsonp;

var url;
/*html-minifier will remove spaces and extra "s, DONT change tags, this station list is injected*/
/*STARTINSERT*/
var s={"":"Meadowlands","ABT":"Albertson","ADL":"Auburndale","AGT":"Amagansett","ATL":"Atlantic Terminal","AVL":"Amityville","BDY":"Broadway","BHN":"Bridgehampton","BK":"Stony Brook","BMR":"Bellmore","BPG":"Bethpage","BPT":"Bellport","BRS":"Bellerose","BRT":"Belmont","BSD":"Bayside","BSR":"Bay Shore","BTA":"Babylon","BWD":"Brentwood","BWN":"Baldwin","CAV":"Centre Avenue","CHT":"Cedarhurst","CI":"Central Islip","CLP":"Country Life Press","CPG":"Copiague","CPL":"Carle Place","CSH":"Cold Spring Harbor","DGL":"Douglaston","DPK":"Deer Park","EHN":"East Hampton","ENY":"East New York","ERY":"East Rockaway","EWN":"East Williston","FHL":"Forest Hills","FLS":"Flushing Main Street","FMD":"Farmingdale","FPK":"Floral Park","FPT":"Freeport","FRY":"Far Rockaway","GBN":"Gibson","GCV":"Glen Cove","GCY":"Garden City","GHD":"Glen Head","GNK":"Great Neck","GPT":"Greenport","GRV":"Great River","GST":"Glen Street","GVL":"Greenvale","GWN":"Greenlawn","HBY":"Hampton Bays","HEM":"Hempstead","HGN":"Hempstead Gardens","HOL":"Hollis","HPA":"Hunterspoint Avenue","HUN":"Huntington","HVL":"Hicksville","HWT":"Hewlett","IPK":"Island Park","ISP":"Islip","IWD":"Inwood","JAM":"Jamaica","KGN":"Kew Gardens","KPK":"Kings Park","LBH":"Long Beach","LCE":"Lawrence","LHT":"Lindenhurst","LIC":"Long Island City","LMR":"Locust Manor","LNK":"Little Neck","LTN":"Laurelton","LVL":"Locust Valley","LVW":"Lakeview","LYN":"Lynbrook","MAK":"Mattituck","MAV":"Merillon Avenue","MFD":"Medford","MHL":"Murray Hill","MHT":"Manhasset","MIN":"Mineola","MPK":"Massapequa Park","MQA":"Massapequa","MRK":"Merrick","MSY":"Mastic Shirley","MTK":"Montauk","MVN":"Malverne","NAV":"Nostrand Avenue","NBD":"Nassau Boulevard","NHP":"New Hyde Park","NPT":"Northport","NYK":"Penn Station","OBY":"Oyster Bay","ODE":"Oceanside","ODL":"Oakdale","PDM":"Plandome","PGE":"Patchogue","PJN":"Port Jefferson","PLN":"Pinelawn","PWS":"Port Washington","QVG":"Queens Village","RHD":"Riverhead","RON":"Ronkonkoma","ROS":"Rosedale","RSN":"Roslyn","RVC":"Rockville Centre","SAB":"St. Albans","SCF":"Sea Cliff","SFD":"Seaford","SHD":"Southold","SHN":"Southampton","SJM":"St. James","SMR":"Stewart Manor","SPK":"Speonk","SSM":"Mets-Willets Point","STN":"Smithtown","SVL":"Sayville","SYT":"Syosset","VSM":"Valley Stream","WBY":"Westbury","WDD":"Woodside","WGH":"Wantagh","WHD":"West Hempstead","WHN":"Westhampton","WMR":"Woodmere","WWD":"Westwood","WYD":"Wyandanch","YPK":"Yaphank"};
/*ENDINSERT*/

/* var t is "top" as in top of body (header) */
var t = location.hash;
/* on Chrome, refresh does a 200 or 304 on stop.htm on GH Pages plus MTA call
   even though if I do a "back" then navigate back to stop.htm, no TCPIP traffic
   related to stop.htm because stop.htm is fetched from browser cache, sadly there
   seems to be no way to do a refresh or a replace without triggering network traffic
   so just implement a "Fast" path that does the AJAX call alone, kindda important
   for latency reasons on 2G networks, 200 always if .reload(1),
   304 typ if .reload(0)
*/
if(t != '' && t != '#') {
    /*I removed API key and the "&_" from JQuery, both aren't needed to get a resp*/
    url = 'https://traintime.lirr.org/api/Departure?loc='+t.substring(1);
    /* generate body top string once, its later used for fast refresh */
    t = '<a href=\"javascript:history.back()\">Back</a> Refresh[<a href=\"javascript:getStop()\">Fast</a> <a href=\"javascript:location.replace(\''
          +
/*STARTINSERTPATH*/
          (/stop\.htm$/.test(location.pathname) ? "stop_.htm" : "stop.htm")
/*ENDINSERTPATH*/
          +t+'\')">Slow</a>] <a href=\"'+url+'\">Raw</a><br>';
}

if(url)
    getStop();
else
    document.body.innerHTML = 'No station specified in URL anchor.';

function genArvBodyObj(r){/*r=resp*/
    /*h=html*/
    var h;
    if(typeof r.contents != "string") {
        /*TRAINS is CORS (not really, sameorigin mustve been disabled),
        contents is anyorigin.com wrapper*/
        r.TRAINS || (r = r.contents);
        /* date useless & wastes screen space, rmv it, keep time, date causes
        scn/line overflow on phones*/
        h = r.TIME.split(' ')[1]+' '+(jsonp?'via JSONP':'via CORS')+"<br>";
        h += 'Cur Sta: '+s[r.LOC]+"<br>";
        /*sometimes this comes in the LIRR JSON*/
        r.WARNING && (h += r.WARNING.text+"<br>");
        r.MESSAGE && (h += r.MESSAGE.replace(/\n/g, "<br>"));
        h += "East<br>";
        var i, t, l, w = "West<br>"; /*w=west, t=train, l=lineofhtml*/
        r = r.TRAINS;
        /*I used to have a "No Scheduled trains" message for empty TRAINS array.
          I'm not sure if seasonal stations like Mets or Greenport have empty TRAINS arrays
          but the MTA server returns empty TRAINS array for invalid/fake station codes
          but with a time stamp and the fake station code reflected back in the JSON
          so there is no real "error" or "error" string condition in this API, you can't
          tell "no trains" from "invalid input", so draw timestamp even for invalid stations
          to prove there was network traffic to MTA server, it just looks weird there are
          no trains for east or west
          */
        for (i = 0; i < r.length; i++){
            t = r[i];
            l = t.SCHED.split(' ')[1].split(':').slice(0,2).join(':')
            +'Min '+(Math.ceil(t.CD/60))
            +'-Tk'+(t.TRACK || '?')+'-'+s[t.DEST]+'-'+(t.HSF?'H':'')+(t.JAM?'J':'')+"<br>";
            t.DIR == 'E'? h += l: w += l;
        }
        h+=w;
    } else
        h = r.contents; /*anyorigin.com error string (obsolete, not used anymore)*/
/*whatever origin doesn't have good error reporting, failure looks like
genArvBodyObj({"contents":"","status":{"url":"https://traintime.lirr.org/api/Departure%3Floc=NYK&_=1508859717102","content_type":"text/html; charset=UTF-8","http_code":500}})
*/
    document.body.innerHTML += h;
}
function getStop(addIMS) {
    document.body.innerHTML = t; /*t=top*/
    try {
        /* on Fast refresh, on CORS enabled browsers, a traintime.lirr.org XHR req
          will happen over network, once browser sees no Access Control header
          it will "fail" the req to the page, then the page does the JSONP network
          request, stop this double request thing to save network traffic after CORS
          fails the 1st time, the server wont magically get the header one minute.
          Once CORS fails once, it will never succeed on that particular client, so
          never try a CORS request again.
          Browsers without CORS like Opera 10, fail the XHR req, instantly, client
          side, without network traffic.*/
        if(jsonp) throw(0);
        /*open() can fire errors events or throw exceptions*/
        x.open('GET', url, 1);
        /* handler assignment can't be factored to root or IE6 desktop and IE6 mobile
          wont drawn train times using "Fast" beyond the 1st/initial page load
          and only "Slow" works
          http://keelypavan.blogspot.com/2006/03/reusing-xmlhttprequest-object-in-ie.html*/
        x.onreadystatechange = onRSC;
        if(addIMS) x.setRequestHeader("If-Modified-Since", new Date(0));
        x.send();
    } catch (e) {
        getJSONP();
    }
}

function getJSONP() {
    /*no CORS (old Operas, IE6 either yes/no sec warn or just works)*/
    /* alert("XHR failed-will try JSONP:\n"+e); */
    jsonp = 1;
    /*  opera mobile 10.00, opera desktop 10.00 1750 need cache busting
        raw button (forced download) doesnt work in updating cache */
    var scriptElem = document.createElement("script");
    /* Date.now() from JQuery isn't available in Opera 10.00 */
    scriptElem.setAttribute('src', 'http://jsonproxy.herokuapp.com/?url='+escape(url)+'%26_%3D'+new Date().getTime()+'&callback=genArvBodyObj');
    var h = document.getElementsByTagName('head')[0];
    /*dont leak mem adding infinite JSONP script elements
    this also cancels last in-progress, maybe timing out, JSONP fetch supposedly */
    if(h.childNodes.length > 1)
        h.removeChild(h.childNodes[1]);
    h.appendChild(scriptElem);
    /*document.body.appendChild(scriptElem);/*crashes on IE6 if forced JSONP mode*/
}
function onRSC(evtXHR)
{
    if (x.readyState == 4)
    {
            if (x.status == 200)
            {   /* IE 6 cache hit, no IP traffic happened, thats bad,
                  this detects it and resends it, on Chrome with CORS
                  XMLHttpRequest cannot load http://54.90.113.57/getTime/E/G14. Request header field If-Modified-Since is not allowed by Access-Control-Allow-Headers in preflight response.
                  so include IMS header ONLY if IE with cache bug by feature test and no CORS support

                  asking CORS chrome for the Date header causes "Refused to get unsafe header "Date"" and empty header value
                  which would trigger the IE 6 retry, but dont do the IE6 retry on chrome, so test first for CORS
                */
                'withCredentials' in x || x.getResponseHeader("Date")
    /*injection IDC, < IE 8 dont have JSON obj & not gonna load 3rd party*/
                    ? genArvBodyObj(eval('0,'+x.responseText))
                    : getStop(1);
            }
            else /*failed XHR BC CORS on FF doesn't throw an exeception like Opera 10,
                  supposedly you can't tell from CORS fail from timeout according to spec,
                  so just do the JSONP blindly*/
                x.status == 0 ? getJSONP() : alert("Error HTTP Status "+x.status);
    }
    /*else
        alert("currently the application is at" + invocation.readyState); */
}</script></html>
<!--
JSONP innerhtml on body element/appendchild script element to body IE6 crash
>	mshtml.dll!CTreePos::SourceIndex()  + 0x3	
 	mshtml.dll!CMarkup::InsertElementInternal()  + 0x37b	
 	mshtml.dll!CDoc::InsertElement()  + 0x98	
 	mshtml.dll!CDocument::get_implementation()  + 0x135	
 	mshtml.dll!CElement::insertBefore()  + 0xd0	
 	mshtml.dll!CElement::appendChild()  + 0x33	
 	mshtml.dll!Method_IDispatchpp_IDispatchp()  + 0x60	
 	mshtml.dll!CBase::ContextInvokeEx()  + 0x15b	
 	mshtml.dll!CElement::ContextInvokeEx()  + 0x49	
 	mshtml.dll!CElement::ContextThunk_InvokeEx()  + 0x43	
 	jscript.dll!IDispatchExInvokeEx2()  + 0x6f	
 	jscript.dll!IDispatchExInvokeEx()  + 0x3e	
 	jscript.dll!InvokeDispatchEx()  + 0x78	
 	jscript.dll!VAR::InvokeByName()  + 0x9f0	
 	jscript.dll!VAR::InvokeDispName()  + 0x40	
 	jscript.dll!VAR::InvokeByDispID()  + 0x54	
 	jscript.dll!CScriptRuntime::Run()  + 0x2db0	
 	jscript.dll!ScrFncObj::Call()  + 0x85	
 	jscript.dll!CSession::Execute()  + 0x9c	
 	jscript.dll!NameTbl::InvokeDef()  + 0x101	
 	jscript.dll!NameTbl::InvokeEx()  + 0xb6	
 	jscript.dll!IDispatchExInvokeEx2()  + 0x6f	
 	jscript.dll!IDispatchExInvokeEx()  + 0x3e	
 	jscript.dll!NameTbl::InvokeEx()  - 0x194a0	
 	mshtml.dll!CScriptCollection::InvokeEx()  + 0x8f	
 	mshtml.dll!CWindow::InvokeEx()  + 0x2c49e	
 	mshtml.dll!COmWindowProxy::InvokeEx()  + 0x3379c	
 	mshtml.dll!COmWindowProxy::subInvokeEx()  + 0x26	
 	jscript.dll!IDispatchExInvokeEx2()  + 0x6f	
 	jscript.dll!IDispatchExInvokeEx()  + 0x3e	
 	jscript.dll!InvokeDispatchEx()  + 0x78	
 	jscript.dll!VAR::InvokeByDispID()  - 0x3b65	
 	jscript.dll!CScriptRuntime::Run()  + 0x2db0	
 	jscript.dll!ScrFncObj::Call()  + 0x85	
 	jscript.dll!CSession::Execute()  + 0x9c	
 	jscript.dll!NameTbl::InvokeDef()  + 0x101	
 	jscript.dll!NameTbl::InvokeEx()  + 0xb6	
 	mshtml.dll!CBase::InvokeDispatchWithThis()  + 0xce	
 	mshtml.dll!CBase::InvokeEvent()  + 0x70e2d	
 	mshtml.dll!CBase::FireEvent()  + 0xc5	
 	mshtml.dll!CElement::BubbleEventHelper()  - 0x6ed	
 	mshtml.dll!CElement::FireEvent()  + 0x10168	
 	mshtml.dll!CElement::Fire_onclick()  + 0x1c	
 	mshtml.dll!CElement::DoClick()  + 0x67	
 	mshtml.dll!CInput::DoClick()  + 0x3a	
 	mshtml.dll!CDoc::PumpMessage()  + 0x279b9	
 	mshtml.dll!CDoc::OnMouseMessage()  + 0x1a7	
 	mshtml.dll!CDoc::OnWindowMessage()  + 0x5a60a	
 	mshtml.dll!CServer::WndProc()  + 0x76	
 	user32.dll!_InternalCallWinProc@20()  + 0x28	
 	user32.dll!_UserCallWinProcCheckWow@32()  + 0xb7	
 	user32.dll!_DispatchMessageWorker@8()  + 0xdc	
 	user32.dll!_DispatchMessageW@4()  + 0xf	
 	browseui.dll!TimedDispatchMessage()  + 0x33	
 	browseui.dll!BrowserThreadProc()  + 0x336	
 	browseui.dll!BrowserProtectedThreadProc()  + 0x50	
 	browseui.dll!_SHOpenFolderWindow@4()  + 0x22c	
 	shdocvw.dll!_IEWinMain@8()  + 0x133	
 	IEXPLORE.EXE!WinMainT()  + 0x2de	
 	IEXPLORE.EXE!__ModuleEntry@0()  + 0x99	
 	kernel32.dll!_BaseProcessStart@4()  + 0x23	
-->
