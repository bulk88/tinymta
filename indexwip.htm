<html manifest="ac.appcache"><head>
<!-- put no-referrer so preload reqs match later fetch reqs instead of double req -->
<meta name=mobileoptimized content=0><meta name="referrer" content="no-referrer">
<!-- preconnect Chrome 46/FF41-70 115-, preconnect Chrome 50/FF 85, inc both -->
<link href="https://api.weather.com/v3/wx/forecast/hourly/1day?geocode=40.74,-73.91&format=json&units=e&language=en-us&apiKey=8de2d8b3a93542c9a2d8b3a935a2c909" as="fetch" rel="preload" crossorigin>
<!-- as.js is a CFW, so higher latency vs static files on CF, put these 2 .js -->
<!-- on wire asap, for parallel download and parse/latency by modern UAs with -->
<!-- async, f.js has work arounds for as.js no-async early failed paint/no DOM -->
<!-- body yet problems, IMO as.js is less important than getting "new socket"  -->
<!-- cross origin weather JSON preload on wire, since tinymta socket 25%-99% chance -->
<!-- already started -->
<script async src=as.js></script>
<script async src=dumb.js></script>
<!-- routes.js takes a while to generate b/c its a CFW, so start it early -->
<!-- it doesn't cause congestion on the wire b/c CFW latency, its also small -->
<!-- vs MTA alerts file -->
<link href=routes.js as=script rel=preload>
<!-- dont do preconnect fallback for weather, not worth wire bytes -->
<!-- 1062 vs 1059 bytes gz local af rm weather PC tag -->
<!-- 1059 vs 1047 bytes gz local af rm 2 dns-fetch tags -->
<!-- preconnect to status.htm's API -->
<link href="//collector-otp-prod.camsys-apps.com" rel="preconnect" crossorigin>
<!-- not time sensitive, all below are navigates or unimplimented by SF -->
<link href=stations.htm rel=prefetch>
<link href=mn/stations.htm rel=prefetch>
<link href=li/stations.htm rel=prefetch>
<link href=status.htm rel=prefetch>
<title>tinymta - Lightweight NYC MTA Subway Train arrival times</title>
</head><body>
Do you have a<br>
[1]<a accesskey=1 href=stations.htm>Smart Phone (Subway)</a><br>
[2]<a accesskey=2 href=mn/stations.htm>Smart Phone (Metro North)</a><br>
[3]<a accesskey=3 href=li/stations.htm>Smart Phone (Long Island)</a><br>
[4]<a accesskey=4 href=jsrdt.htm>Dumb Phone (Subway)</a><br>
[5]<a accesskey=5 href=mn/jsrdt.htm>Dumb Phone (Metro North)</a><br>
[6]<a accesskey=6 href=li/jsrdt.htm>Dumb Phone (Long Island)</a><br>
[7]<a accesskey=7 href=status.htm>Service Changes</a><br>
<!-- [8]<a accesskey=8 href=plan.htm>Smart Phone UI (Subway) Trip Planner</a><br> -->
<!-- [9]<a accesskey=9 href=more.htm>More</a><br> -->
[0]<a accesskey=0 href=abt.htm>About</a>
<!-- div used by as.js, keep single NBSP!!! space in div, survives minify -->
<div>Â </div>
<script>
//1029->1062
//localStorage.setItem("fav", "document.body.appendChild(document.createElement('div')).appendChild(document.createTextNode('FFF'))");
try{eval(localStorage.getItem("fav"))} catch (e) {}

function draw_fav(config, replaceEl) {
  var e2,
  d = document.createElement('div'),
  e = d.appendChild(document.createElement('label'));
  (e2 = e.appendChild(document.createElement('input'))).type = "checkbox";
  e2.checked = config[1];
  e.appendChild(document.createTextNode("<3"));
  e = d.appendChild(document.createElement('label'));
  (e2 = e.appendChild(document.createElement('input'))).type = "checkbox";
  e2.checked = config[2];
  e.appendChild(document.createTextNode("Tm "));
  e = 0;
  if (!config[1])
    e = "History off";
  else if (config.length == 3) {
    e = "No history yet";
  } else
    e = 0;
  if (e) {
    d.appendChild(document.createTextNode(e));
  } else {
    for (i = 3; i < 9 && (e = config[i]); i++) {
      (e2 = d.appendChild(document.createElement('a'))).href = (e[1].charAt() == 'r' ? "/rstop.htm#" : "/stop.htm#") + e[1].slice(1);
      e2.appendChild(document.createTextNode(e[0]));
      d.appendChild(document.createTextNode(" "));
    }
  }
  if (replaceEl) {
    replaceEl.parentNode.replaceChild(d, replaceEl);
    extend_fav();
  } else {
    document.body.appendChild(d);
  }
}

//draw_fav(read_fav());

function read_fav() {
  var c = localStorage.getItem("fav");
  if (!c) {
    //version, keep hist, realtime (unimplemented), sta#1, sta#2
    localStorage.setItem("fav", '(function (e,t){var d,a=document.createElement("div"),p=a.appendChild(document.createElement("label"));if((d=p.appendChild(document.createElement("input"))).type="checkbox",d.checked=e[1],p.appendChild(document.createTextNode("<3")),(d=(p=a.appendChild(document.createElement("label"))).appendChild(document.createElement("input"))).type="checkbox",d.checked=e[2],p.appendChild(document.createTextNode("Tm ")),p=0,p=e[1]?3==e.length?"No history yet":0:"History off")a.appendChild(document.createTextNode(p));else for(i=3;i<9&&(p=e[i]);i++)(d=a.appendChild(document.createElement("a"))).href=("r"==p[1].charAt()?"/rstop.htm#":"/stop.htm#")+p[1].slice(1),d.appendChild(document.createTextNode(p[0])),a.appendChild(document.createTextNode(" "));t?(t.parentNode.replaceChild(a,t),extend_fav()):document.body.appendChild(a)})([0,1,0])');
    return [0,1,0];
  } else {
    c = c.slice(c.lastIndexOf('([')+1,c.length-1);
    return JSON.parse(c);
  }
}
function store_fav(config) {
  var oC = localStorage.getItem("fav");
  oC = oC.slice(0, oC.lastIndexOf('([')+1);
  localStorage.setItem("fav", oC+JSON.stringify(config)+')');
}

//add event handers to checkmarks, so less draw code in LS
function extend_fav(fc, el, divEl) {
  el = location.pathname;
  //match "/" "/docs/" and "/index" "/index.htm" "/index.html" etc
  //"abc"[2] string as array, doesn't work IE 5.0, its undef, use .charAt()
  if (el.charAt(el.length - 1) == '/' || !el.indexOf('/index')) {
    el = document.body.lastChild;
    while (el) { //last el is NEVER it
      //alert(el.innerHTML);
      if (el.nodeName == "DIV"
         && (fc = el.firstChild)
         && fc.nodeName == "LABEL") {
        divEl = el;
        window.addEventListener('pageshow', function (event){
          if (event.persisted) {
            draw_fav(read_fav(), divEl);
          }
        },{once:true});
        fc.firstChild.onchange = function (evt) {
          //debugger;
          var c = read_fav(),
          e = evt.target,
          f = e.checked;
          c[1] = f ? 1 : 0;
          if (!f) {
            c[2] = 0;
            c.length = 3;
          }
          store_fav(c);
          draw_fav(read_fav(), divEl);
        };

        fc.nextSibling.firstChild.onchange = function (evt) {
          var c = read_fav(),
          e = evt.target,
          f = e.checked;
          c[2] = f ? 1 : 0;
          store_fav(c);
          draw_fav(read_fav(), divEl);
        };
        /* break loop early, perf reasons, no more DIVs to visit */
        el = {};
      } //end, found the DIV
      //anti-run away
      else if (el.nodeName == "A") {
        el = {};
      }
      el = el.previousSibling
    }
  }
}

//extend_fav() will be outside the JS code in LS one day
extend_fav();


//gz 1021 "document.", gz 1019 "doc." everywhere
var doc = document;
//IE 5.5 and 6.0 don't have document.head
var headElem = doc.documentElement.firstChild;
function y (nosvg, mkWeatherCellContainerPF) {
  fetch(headElem.children[2].href,{},'wea')
  .then(function (r) {
  r.status != 200 ? //put != first for r.status gzip reasons
    alert("error http status " + r.status)
  :
    r.json().then(function (r) {
/*
was a polyfill func or real doc.CDF, but it was switched to "polyfill always"
DIV tag, to keep this minified/gziped htm file
inside exactly 1 http 1.1 resp packet (1500 bytes)
*/
      var frag = doc.createElement('div'),
      e, //elem
      v, //val
      img_ext = nosvg ? nosvg : '.svg',
      br = doc.createElement('br'),
      i = 0;
      /*hardcode 24 hr in a day to save wire*/
      for (; i < 24; i++) {
/*no inline-block for IE 5.0, inline-block 5.5 up.
  A 1 cell table, is a old PF hack inline-block emulate for IE 5.0
  http://mrclay.org/web_design/shrink_to_fit/
  http://mrclay.org/web_design/shrink_to_fit/ieshrink.js
  I fixed a bug in code above "<table><tr><td>" only works for
  .innerHTML/real HTML parser in IE, <tbody> required if appendChild/W3C DOM
  for IE 5 5.5 and 6, in my testing
  see https://blog.tomayac.com/2006/06/23/dynamically-created-tables-in-internet-explorer-214331/
*/
        if (mkWeatherCellContainerPF) {
          e = mkWeatherCellContainerPF(frag);
        } else {
/*
originally a DIV tag, switched to SPAN for IE 5.5/6 compat.
So IE 11 and all FF/WBK/Chrome know style=display=inline-block on a DIV tag
but IE 5.5/6 refuse to honor inline-block on a DIV tag, switch to SPAN
*/
          e = frag.appendChild(doc.createElement('span'));
        }
        v = +r.validTimeLocal[i].slice(11, 13);
        //perf, skip locale/Date objects
        e.appendChild(doc.createTextNode((v % 12 || 12) + (v >= 12 ? 'PM\xa0' : 'AM\xa0')));
/*
Only opera 10 fatal excpt err if missing arg. All IEs don't err and no modern
Safari/WBK/Chrome/FF needs arg. But MDN archives say W3C fuzzyness and spec
flipping between FF 1-3?? and W3C on meaning of no arg, prob caused Opera devs
to mandate the arg 100% of time, false is "clone shallow" true is "clone deep"
meaningless for self closing BR tag
*/
        e.appendChild(br.cloneNode(0));
        e.appendChild(doc.createTextNode(r.temperature[i] + "F"));
        e.appendChild(br.cloneNode(0));
        e.appendChild(doc.createTextNode(r.precipChance[i] + "%"));
/*
        v = e.appendChild(doc.createElement('font'));
        v.color='#4ec1f5';
        v.face="Wingdings";
        v.appendChild(doc.createTextNode("S"));

add color for older Windows, its ignored on android
*/
        v = e.appendChild(doc.createElement('font'));
        v.color='#4ec1f5';
        v.appendChild(doc.createTextNode("\ud83d\udca7"));
        e.appendChild(br.cloneNode(0));
        e.appendChild(doc.createElement('img'))
        .src =
/*STARTINSERTPATH*/
          'w/'
/*ENDINSERTPATH*/
          +r.iconCode[i] + img_ext;
      }
      doc.body.appendChild(frag);
    }); //json cb
  }); //end fetch CB
};
if (!this.f) {
  if (this.fetch) {
    y();
  } else {
  //dont double load in dumb.js, async flag or no async flag
    f=1;
    headElem.appendChild(doc.createElement("script")).src = 'f.js';
  }
}
</script>
<!-- parse after script tag, weather rendering is async b/c IO -->
<!-- add 2 blank lines if mobile, as.js UI jerk -->
<style>
span{display:inline-block}img{height:2em}@media(max-width:600px){div{min-height:2lh}}
</style>
</body></html>
