<html>
<head>
<link href="//mnorth.prod.acquia-sites.com" rel="dns-prefetch">
<link href="//mnorth.prod.acquia-sites.com" rel="preconnect">
<meta name="mobileoptimized" content="0">
<meta name="referrer" content="no-referrer">
</head>
<body>No javascript</body>
<script type="text/javascript">
mangleIndex={name:"mangleIndex"};
getStop.name = 'getStop';
genArvBodyObj.name = 'genArvBodyObj';
/*Firefox, Opera, IE7, and other browsers will use the native object*/
/*IE 5 and 6 will use the ActiveX control*/
var x = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
var jsonp;

var url;

//https://mymnr.org/allstations // let o = this.filterStationList(); let ab = []; o.forEach(e => {ab[e.Code]=e.Branch_Id+e.Name}); JSON.stringify(ab);
var s=[,"1Grand Central",,,"1Harlem-125th St.",,,,,"1Morris Heights","1University Heights","1Marble Hill",,,"1Spuyten Duyvil",,"1Riverdale","1Ludlow","1Yonkers","1Glenwood","1Greystone",,"1Hastings-on-Hudson","1Dobbs Ferry","1Ardsley-on-Hudson","1Irvington",,"1Tarrytown",,"1Philipse Manor","1Scarborough","1Ossining",,"1Croton-Harmon",,,,"1Cortlandt",,"1Peekskill","1Manitou",,"1Garrison","1Cold Spring","1Breakneck Ridge",,"1Beacon",,,"1New Hamburg",,"1Poughkeepsie",,,"2Melrose","2Tremont","2Fordham","2Botanical Garden","2Williams Bridge","2Woodlawn",,"2Wakefield","2Mt Vernon West",,"2Fleetwood","2Bronxville","2Tuckahoe",,"2Crestwood",,,"2Scarsdale","2Hartsdale",,"2White Plains",,"2North White Plains",,"2Valhalla","2Mount Pleasant","2Hawthorne","2Pleasantville",,"2Chappaqua","2Mount Kisco","2Bedford Hills","2Katonah",,"2Goldens Bridge","2Purdy's","2Croton Falls","2Brewster",,,"2Southeast",,,"2Patterson","2Pawling","2Appalachian Trail","2Harlem Valley-Wingdale","2Dover Plains",,,,"3Mt Vernon East ","3Pelham",,"3New Rochelle",,"3Larchmont","3Mamaroneck","3Harrison",,"3Rye","3Port Chester","3Greenwich",,"3Cos Cob",,"3Riverside","3Old Greenwich",,,"3Stamford",,,"3Noroton Heights","3Darien","3Rowayton",,"3South Norwalk",,"3East Norwalk","3Westport",,"3Green's Farms","3Southport","3Fairfield",,"3Bridgeport",,,"3Stratford",,"3Milford",,,,"3New Haven",,"3NH-State St.",,"4Glenbrook","4Springdale","4Talmadge Hill",,"4New Canaan","5Merritt 7",,"5Wilton","5Cannondale","5Branchville","5Redding","5Bethel","5Danbury",,"6Derby","6Ansonia","6Seymour","6Beacon Falls","6Naugatuck","6Waterbury",,,,"2Tenmile River","2Wassaic",,,,,,,,,,,"3Fairfield Metro",,"3West Haven",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"1Yankees-E153 St."];

/* var t is "top" as in top of body (header) */
var t = location.hash;
/* on Chrome, refresh does a 200 or 304 on stop.htm on GH Pages plus MTA call
   even though if I do a "back" then navigate back to stop.htm, no TCPIP traffic
   related to stop.htm because stop.htm is fetched from browser cache, sadly there
   seems to be no way to do a refresh or a replace without triggering network traffic
   so just implement a "Fast" path that does the AJAX call alone, kindda important
   for latency reasons on 2G networks, 200 always if .reload(1),
   304 typ if .reload(0)
*/
if(t != '' && t != '#') {
    /*
    mta.info uses https://otp-mta-prod.camsys-apps.com/otp/routers/default/nearby?stops=MNR%3A1&timeRange=21600&apikey=Z276E3rCeTzOQEoBPPN4JCEc6GfvdnYE
    mnorth.prod.acquia-sites.com API is from
    https://web.archive.org/web/20220222050141/https://mymnr.org/stationArrivals/65
    but maybe also mymta or MN traintime APK app but I didn't get it from the APK
    https://backend-unified.mylirr.org/arrivals/2SM also delivers MNRR nowadays in 2022
    ab -n100  -H "accept-version: 1.5" http://backend-unified.mylirr.org/arrivals/2SM 93 ms/req
    ab -n100  http://mnorth.prod.acquia-sites.com/wse/Mymnr/v6/trains/124/66498c0c-b0f3-4a39-0bda-a3effabd50b5/ 59 ms
    ab -n100 "http://otp-mta-prod.camsys-apps.com/otp/routers/default/nearby?stops=MNR%3A124&timeRange=21600&apikey=Z276E3rCeTzOQEoBPPN4JCEc6GfvdnYE" 271 ms
    */
    url = '//mnorth.prod.acquia-sites.com/wse/Mymnr/v6/trains/'+t.substring(1)+'/66498c0c-b0f3-4a39-0bda-a3effabd50b5/';
    /* generate body top string once, its later used for fast refresh */
    t = '<a href=javascript:history.back()>Back</a> Refresh[<a href=javascript:getStop()>Fast</a> <a href=\"javascript:location.replace(\''
          +
/*STARTINSERTPATH*/
          (/stop\.htm$/.test(location.pathname) ? "stop_.htm" : "stop.htm")
/*ENDINSERTPATH*/
          +t+'\')">Slow</a>] <a href='+url+'>Raw</a><br>';
}

if(url)
    getStop();
else
    document.body.innerHTML = 'No station specified in url anchor.';

function genArvBodyObj(r) {
    if (r.TRAINS || r.status.http_code == 200 && (r = eval('0,'+r.contents))) {
        /* date useless & wastes screen space, rmv it, keep time, date causes
        scn/line overflow on phones*/
        var i, t, l, loc, w = "South<br>", /*w=west, t=train, l=lineofhtml*/
        h = r.TIME.split(' ')[1]+' '+(jsonp?'via JSONP':'via CORS')+"<br>"
            + 'Cur Sta: '+s[loc = r.LOC].substring(1)+"<br>";
        /*sometimes this comes in the LIRR JSON*/
        r.WARNING && (h += r.WARNING.text+"<br>");
        r.MESSAGE && (h += r.MESSAGE.replace(/\n/g, "<br>"));
        h += "North<br>";

        r = r.TRAINS;
        /*I used to have a "No Scheduled trains" message for empty TRAINS array.
          I'm not sure if seasonal stations like Mets or Greenport have empty TRAINS arrays
          but the MTA server returns empty TRAINS array for invalid/fake station codes
          but with a time stamp and the fake station code reflected back in the JSON
          so there is no real "error" or "error" string condition in this API, you can't
          tell "no trains" from "invalid input", so draw timestamp even for invalid stations
          to prove there was network traffic to MTA server, it just looks weird there are
          no trains for east or west
          */
        for (i = 0; i < r.length; i++){
            t = r[i];
            //debugger;
            l = t.SCHED.split(' ')[1].split(':').slice(0,2).join(':')
            +'-Min '+(Math.ceil(t.CD/60))
            +'-Tk'+(t.TRACK || '?')
            +'-D:'+s[t.DEST].substring(1)
            //t.STOPS.indexOf(loc)+(t.DIR == 'O'?1:-1) +1 -1 not needed
            //stop list is reversed as needed for opposite directions
            //TODO use official 2 letter codes for MNR stations instead of devowel
            +'-N:'+s[t.STOPS[Math.min(t.STOPS.indexOf(loc)+1,t.STOPS.length-1)]].substring(1).replace(/[ aeiouy-]/g,'')+(t.PEAK === 'Peak'?'-PK':'')+"<br>";
            t.DIR == 'O'? h += l: w += l;
        }
    }
    document.body.innerHTML += h+w+'<br>Key: D: (destination) N: (next stop) PK (Peak)<br><br>';;
}
function getStop(addIMS) {
    document.body.innerHTML = t; /*t=top*/
    try {
        /*throw(0);*/
        /* on Fast refresh, on CORS enabled browsers, a traintime.lirr.org XHR req
          will happen over network, once browser sees no Access Control header
          it will "fail" the req to the page, then the page does the JSONP network
          request, stop this double request thing to save network traffic after CORS
          fails the 1st time, the server wont magically get the header one minute.
          Once CORS fails once, it will never succeed on that particular client, so
          never try a CORS request again.
          Browsers without CORS like Opera 10, fail the XHR req, instantly, client
          side, without network traffic.*/
        if(jsonp) throw(0);
        /*open() can fire errors events or throw exceptions*/
        x.open('get', url, 1);
        /* handler assignment can't be factored to root or IE6 desktop and IE6 mobile
          wont drawn train times using "Fast" beyond the 1st/initial page load
          and only "Slow" works
          http://keelypavan.blogspot.com/2006/03/reusing-xmlhttprequest-object-in-ie.html*/
        x.onreadystatechange = onRSC;
        //x.setRequestHeader('accept-version','1.5');
        //the server sends Set-Cookie: AWSALB= and Set-Cookie: AWSALBCORS=
        //but also "Access-Control-Allow-Origin: *" and credentials doesn't
        //allow wildcard, so never turn this on, just accept forever these
        //cookies will come
        //x.withCredentials = !0;
        if(addIMS) x.setRequestHeader("If-Modified-Since", new Date(0));
        x.send();
    } catch (e) {
        getJSONP();
    }
}

function getJSONP() {
    /*no CORS (old Operas, IE6 either yes/no sec warn or just works)*/
    /* alert("XHR failed-will try JSONP:\n"+e); */
    /*  opera mobile 10.00, opera desktop 10.00 1750 need cache busting
        raw button (forced download) doesnt work in updating cache */
    var scriptElem = document.createElement("script");
    //note this WILL NOT RUN FROM 127.0.0.1 or file://
    scriptElem.src ='//api.allorigins.win/get?url=http%3A'+escape(url+'?_='+new Date().getTime())+'&callback=genArvBodyObj';
    jsonp = document.getElementsByTagName('head')[0];
    /*dont leak mem adding infinite JSONP script elements
    this also cancels last in-progress, maybe timing out, JSONP fetch supposedly */
    if(jsonp.childNodes.length > 1)
        jsonp.removeChild(jsonp.childNodes[1]);
    jsonp.appendChild(scriptElem);
    /*document.body.appendChild(scriptElem);/*crashes on IE6 if forced JSONP mode*/
}
function onRSC()
{
    if (x.readyState == 4)
    {
            if (x.status == 200)
            {   /* IE 6 cache hit, no IP traffic happened, thats bad,
                  this detects it and resends it, on Chrome with CORS
                  XMLHttpRequest cannot load http://54.90.113.57/getTime/E/G14. Request header field If-Modified-Since is not allowed by Access-Control-Allow-Headers in preflight response.
                  so include IMS header ONLY if IE with cache bug by feature test and no CORS support

                  asking CORS chrome for the Date header causes "Refused to get unsafe header "Date"" and empty header value
                  which would trigger the IE 6 retry, but dont do the IE6 retry on chrome, so test first for CORS
                */
                'withCredentials' in x || x.getResponseHeader("Date")
    /*injection IDC, < IE 8 dont have JSON obj & not gonna load 3rd party*/
                    ? genArvBodyObj(eval('0,'+x.responseText))
                    : getStop(1);
            }
            else /*failed XHR BC CORS on FF doesn't throw an exeception like Opera 10,
                  supposedly you can't tell from CORS fail from timeout according to spec,
                  so just do the JSONP blindly*/
                x.status ? alert("error HTTP status "+x.status) : getJSONP();
    }
    /*else
        alert("currently the application is at" + invocation.readyState); */
}
</script></html>
<!--
JSONP innerhtml on body element/appendchild script element to body IE6 crash
>   mshtml.dll!CTreePos::SourceIndex()  + 0x3
    mshtml.dll!CMarkup::InsertElementInternal()  + 0x37b
    mshtml.dll!CDoc::InsertElement()  + 0x98
    mshtml.dll!CDocument::get_implementation()  + 0x135
    mshtml.dll!CElement::insertBefore()  + 0xd0
    mshtml.dll!CElement::appendChild()  + 0x33
    mshtml.dll!Method_IDispatchpp_IDispatchp()  + 0x60
    mshtml.dll!CBase::ContextInvokeEx()  + 0x15b
    mshtml.dll!CElement::ContextInvokeEx()  + 0x49
    mshtml.dll!CElement::ContextThunk_InvokeEx()  + 0x43
    jscript.dll!IDispatchExInvokeEx2()  + 0x6f
    jscript.dll!IDispatchExInvokeEx()  + 0x3e
    jscript.dll!InvokeDispatchEx()  + 0x78
    jscript.dll!VAR::InvokeByName()  + 0x9f0
    jscript.dll!VAR::InvokeDispName()  + 0x40
    jscript.dll!VAR::InvokeByDispID()  + 0x54
    jscript.dll!CScriptRuntime::Run()  + 0x2db0
    jscript.dll!ScrFncObj::Call()  + 0x85
    jscript.dll!CSession::Execute()  + 0x9c
    jscript.dll!NameTbl::InvokeDef()  + 0x101
    jscript.dll!NameTbl::InvokeEx()  + 0xb6
    jscript.dll!IDispatchExInvokeEx2()  + 0x6f
    jscript.dll!IDispatchExInvokeEx()  + 0x3e
    jscript.dll!NameTbl::InvokeEx()  - 0x194a0
    mshtml.dll!CScriptCollection::InvokeEx()  + 0x8f
    mshtml.dll!CWindow::InvokeEx()  + 0x2c49e
    mshtml.dll!COmWindowProxy::InvokeEx()  + 0x3379c
    mshtml.dll!COmWindowProxy::subInvokeEx()  + 0x26
    jscript.dll!IDispatchExInvokeEx2()  + 0x6f
    jscript.dll!IDispatchExInvokeEx()  + 0x3e
    jscript.dll!InvokeDispatchEx()  + 0x78
    jscript.dll!VAR::InvokeByDispID()  - 0x3b65
    jscript.dll!CScriptRuntime::Run()  + 0x2db0
    jscript.dll!ScrFncObj::Call()  + 0x85
    jscript.dll!CSession::Execute()  + 0x9c
    jscript.dll!NameTbl::InvokeDef()  + 0x101
    jscript.dll!NameTbl::InvokeEx()  + 0xb6
    mshtml.dll!CBase::InvokeDispatchWithThis()  + 0xce
    mshtml.dll!CBase::InvokeEvent()  + 0x70e2d
    mshtml.dll!CBase::FireEvent()  + 0xc5
    mshtml.dll!CElement::BubbleEventHelper()  - 0x6ed
    mshtml.dll!CElement::FireEvent()  + 0x10168
    mshtml.dll!CElement::Fire_onclick()  + 0x1c
    mshtml.dll!CElement::DoClick()  + 0x67
    mshtml.dll!CInput::DoClick()  + 0x3a
    mshtml.dll!CDoc::PumpMessage()  + 0x279b9
    mshtml.dll!CDoc::OnMouseMessage()  + 0x1a7
    mshtml.dll!CDoc::OnWindowMessage()  + 0x5a60a
    mshtml.dll!CServer::WndProc()  + 0x76
    user32.dll!_InternalCallWinProc@20()  + 0x28
    user32.dll!_UserCallWinProcCheckWow@32()  + 0xb7
    user32.dll!_DispatchMessageWorker@8()  + 0xdc
    user32.dll!_DispatchMessageW@4()  + 0xf
    browseui.dll!TimedDispatchMessage()  + 0x33
    browseui.dll!BrowserThreadProc()  + 0x336
    browseui.dll!BrowserProtectedThreadProc()  + 0x50
    browseui.dll!_SHOpenFolderWindow@4()  + 0x22c
    shdocvw.dll!_IEWinMain@8()  + 0x133
    IEXPLORE.EXE!WinMainT()  + 0x2de
    IEXPLORE.EXE!__ModuleEntry@0()  + 0x99
    kernel32.dll!_BaseProcessStart@4()  + 0x23
-->
