<html>
<head><meta name="mobileoptimized" content="0"></head>
<body>No Javascript.</body>
<script type="text/javascript">

mangleIndex.name = 'mangleIndex';
getStop.name = 'getStop';
genArvBodyObj.name = 'genArvBodyObj';
/*Firefox, Opera, IE7, and other browsers will use the native object*/
/*IE 5 and 6 will use the ActiveX control*/
var x = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
var jsonp;

var url;

/* var t is "top" as in top of body (header) */
var t = location.hash;
/* on Chrome, refresh does a 200 or 304 on stop.htm on GH Pages plus MTA call
   even though if I do a "back" then navigate back to stop.htm, no TCPIP traffic
   related to stop.htm because stop.htm is fetched from browser cache, sadly there
   seems to be no way to do a refresh or a replace without triggering network traffic
   so just implement a "Fast" path that does the AJAX call alone, kindda important
   for latency reasons on 2G networks, 200 always if .reload(1),
   304 typ if .reload(0)
*/
if(t != '' && t != '#') {
    url = 'http://54.90.113.57/getTime/'+t.substring(1);
    /* generate body top string once, its later used for fast refresh */
    /* no fast refresh, only slow for GWL, t is a #hash anchor, date is GWL cache bust*/
    t = '<a href=\"gstp.htm?'+(new Date).getTime()+t+'\">Refresh</a> <a href=\"'+url+'\">Raw</a><br>';
}

if(url)
    getStop();
else
    document.body.innerHTML = 'No station specified in URL anchor.';

function genArvBodyObj(r){/*r=resp*/
    /*h=html*/
    var h;
    if(r.message.errorCode == 0){
        h = 'MTA Time '+r.lastUpdatedTime+
        /*' '+(jsonp?'via JSONP':'via CORS')+ *//*worthless for GWL, its always CORS*/
        "<br>";
        var i, a = new Date().toTimeString().split(' ');
        a.splice(1,1);
        h += 'Page Time '+a.join(' ')+"<br>";
        h += 'Cur Sta: '+r.stationName+"<br>";
        h += r.direction1.name+"<br>";
        a = r.direction1.times;
        for (i = 0; i < a.length; i++)
            h += 'Min '+a[i].minutes+'-'+a[i].route+'-'+a[i].lastStation+"<br>";
        h += r.direction2.name+"<br>";
        a = r.direction2.times;
        for (i = 0; i < a.length; i++)
            h += 'Min '+a[i].minutes+'-'+a[i].route+'-'+a[i].lastStation+"<br>";
    } else /*injection IDC*/
        h = 'Failed: errorCode: '+r.message.errorCode
            /*+' MessageType '+r.message.MessageType useless*/
            +' Message: '+r.message.message;
    document.body.innerHTML += h;
}
function getStop(addIMS) {
    document.body.innerHTML = t; /*t=top*/
    try {
        /*throw(0);*/
        jsonp = 0;
        /*google web light will cache a CORS fetch for hours/days, and either
        I use JSONP which already has cache busting, or add cachebusting to CORS*/
        x.open('GET', url+'?_='+(new Date).getTime(), 1);
        /* handler assignment can't be factored to root or IE6 desktop and IE6 mobile
          wont drawn train times using "Fast" beyond the 1st/initial page load
          and only "Slow" works
          http://keelypavan.blogspot.com/2006/03/reusing-xmlhttprequest-object-in-ie.html*/
        x.onreadystatechange = onRSC;
        if(addIMS) x.setRequestHeader("If-Modified-Since", new Date(0));
        x.send();
    } catch (e) { /*no CORS (old Operas, IE6 either yes/no sec warn or just works)*/
        /* alert("XHR failed-will try JSONP:\n"+e); */
        jsonp = 1;
        /*  opera mobile 10.00, opera desktop 10.00 1750 need cache busting
            raw button (forced download) doesnt work in updating cache */
        var scriptElem = document.createElement("script"); 
        scriptElem.setAttribute('src', url+'?callback=genArvBodyObj&_='+(new Date).getTime());
        var h = document.getElementsByTagName('head')[0];
        /*dont leak mem adding infinite JSONP script elements
        this also cancels last in-progress, maybe timing out, JSONP fetch supposedly */
        if(h.childNodes.length > 1)
            h.removeChild(h.childNodes[1]);
        h.appendChild(scriptElem);
        /*document.body.appendChild(scriptElem);/*crashes on IE6 if forced JSONP mode*/
    }
}
function onRSC(a)
{
    if (x.readyState == 4)
    {
            if (x.status == 200)
            {   /* IE 6 cache hit, no IP traffic happened, thats bad,
                  this detects it and resends it, on Chrome with CORS
                  XMLHttpRequest cannot load http://54.90.113.57/getTime/E/G14. Request header field If-Modified-Since is not allowed by Access-Control-Allow-Headers in preflight response.
                  so include IMS header ONLY if IE with cache bug by feature test and no CORS support
                  
                  asking CORS chrome for the Date header causes "Refused to get unsafe header "Date"" and empty header value
                  which would trigger the IE 6 retry, but dont do the IE6 retry on chrome, so test first for CORS
                */
                'withCredentials' in x || x.getResponseHeader("Date")
    /*injection IDC, < IE 8 dont have JSON obj & not gonna load 3rd party*/
                    ? genArvBodyObj(eval('0,'+x.responseText))
                    : getStop(1);
            }
            else
                alert("Error HTTP Status "+x.status);
    }
    /*else
        alert("currently the application is at" + invocation.readyState); */
}</script></html>
<!--
JSONP innerhtml on body element/appendchild script element to body IE6 crash
>	mshtml.dll!CTreePos::SourceIndex()  + 0x3	
 	mshtml.dll!CMarkup::InsertElementInternal()  + 0x37b	
 	mshtml.dll!CDoc::InsertElement()  + 0x98	
 	mshtml.dll!CDocument::get_implementation()  + 0x135	
 	mshtml.dll!CElement::insertBefore()  + 0xd0	
 	mshtml.dll!CElement::appendChild()  + 0x33	
 	mshtml.dll!Method_IDispatchpp_IDispatchp()  + 0x60	
 	mshtml.dll!CBase::ContextInvokeEx()  + 0x15b	
 	mshtml.dll!CElement::ContextInvokeEx()  + 0x49	
 	mshtml.dll!CElement::ContextThunk_InvokeEx()  + 0x43	
 	jscript.dll!IDispatchExInvokeEx2()  + 0x6f	
 	jscript.dll!IDispatchExInvokeEx()  + 0x3e	
 	jscript.dll!InvokeDispatchEx()  + 0x78	
 	jscript.dll!VAR::InvokeByName()  + 0x9f0	
 	jscript.dll!VAR::InvokeDispName()  + 0x40	
 	jscript.dll!VAR::InvokeByDispID()  + 0x54	
 	jscript.dll!CScriptRuntime::Run()  + 0x2db0	
 	jscript.dll!ScrFncObj::Call()  + 0x85	
 	jscript.dll!CSession::Execute()  + 0x9c	
 	jscript.dll!NameTbl::InvokeDef()  + 0x101	
 	jscript.dll!NameTbl::InvokeEx()  + 0xb6	
 	jscript.dll!IDispatchExInvokeEx2()  + 0x6f	
 	jscript.dll!IDispatchExInvokeEx()  + 0x3e	
 	jscript.dll!NameTbl::InvokeEx()  - 0x194a0	
 	mshtml.dll!CScriptCollection::InvokeEx()  + 0x8f	
 	mshtml.dll!CWindow::InvokeEx()  + 0x2c49e	
 	mshtml.dll!COmWindowProxy::InvokeEx()  + 0x3379c	
 	mshtml.dll!COmWindowProxy::subInvokeEx()  + 0x26	
 	jscript.dll!IDispatchExInvokeEx2()  + 0x6f	
 	jscript.dll!IDispatchExInvokeEx()  + 0x3e	
 	jscript.dll!InvokeDispatchEx()  + 0x78	
 	jscript.dll!VAR::InvokeByDispID()  - 0x3b65	
 	jscript.dll!CScriptRuntime::Run()  + 0x2db0	
 	jscript.dll!ScrFncObj::Call()  + 0x85	
 	jscript.dll!CSession::Execute()  + 0x9c	
 	jscript.dll!NameTbl::InvokeDef()  + 0x101	
 	jscript.dll!NameTbl::InvokeEx()  + 0xb6	
 	mshtml.dll!CBase::InvokeDispatchWithThis()  + 0xce	
 	mshtml.dll!CBase::InvokeEvent()  + 0x70e2d	
 	mshtml.dll!CBase::FireEvent()  + 0xc5	
 	mshtml.dll!CElement::BubbleEventHelper()  - 0x6ed	
 	mshtml.dll!CElement::FireEvent()  + 0x10168	
 	mshtml.dll!CElement::Fire_onclick()  + 0x1c	
 	mshtml.dll!CElement::DoClick()  + 0x67	
 	mshtml.dll!CInput::DoClick()  + 0x3a	
 	mshtml.dll!CDoc::PumpMessage()  + 0x279b9	
 	mshtml.dll!CDoc::OnMouseMessage()  + 0x1a7	
 	mshtml.dll!CDoc::OnWindowMessage()  + 0x5a60a	
 	mshtml.dll!CServer::WndProc()  + 0x76	
 	user32.dll!_InternalCallWinProc@20()  + 0x28	
 	user32.dll!_UserCallWinProcCheckWow@32()  + 0xb7	
 	user32.dll!_DispatchMessageWorker@8()  + 0xdc	
 	user32.dll!_DispatchMessageW@4()  + 0xf	
 	browseui.dll!TimedDispatchMessage()  + 0x33	
 	browseui.dll!BrowserThreadProc()  + 0x336	
 	browseui.dll!BrowserProtectedThreadProc()  + 0x50	
 	browseui.dll!_SHOpenFolderWindow@4()  + 0x22c	
 	shdocvw.dll!_IEWinMain@8()  + 0x133	
 	IEXPLORE.EXE!WinMainT()  + 0x2de	
 	IEXPLORE.EXE!__ModuleEntry@0()  + 0x99	
 	kernel32.dll!_BaseProcessStart@4()  + 0x23	
-->
